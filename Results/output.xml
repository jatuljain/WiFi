<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.9.5 on win32)" generated="20210709 11:46:02.849" rpa="false" schemaversion="2">
<suite id="s1" name="Automation" source="C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation">
<suite id="s1-s1" name="Tests" source="C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation\Tests">
<suite id="s1-s1-s1" name="V10A" source="C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation\Tests\V10A">
<suite id="s1-s1-s1-s1" name="WLAN 5GHzChannelID" source="C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation\Tests\V10A\WLAN_5GHzChannelID.robot">
<kw name="Fetch the Initial SSID" type="SETUP">
<kw name="Login to DUT" library="CommonFunction">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${HOME_PAGE}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20210709 11:46:03.090" level="INFO">Opening browser 'firefox' to base url 'https://mijnmodem.kpn/login.htm'.</msg>
<msg timestamp="20210709 11:46:03.090" level="INFO">Firefox driver log is always forced to to: C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation\results\geckodriver-26.log</msg>
<status status="PASS" starttime="20210709 11:46:03.090" endtime="20210709 11:46:11.361"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20210709 11:46:11.362" endtime="20210709 11:46:11.385"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:13.402" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:46:11.386" endtime="20210709 11:46:13.402"/>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>${Password}</arg>
<arg>${Password_value}</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<msg timestamp="20210709 11:46:13.406" level="INFO">Sending key(s) ('Qwerty1!',) to //input[@name='ui_pws'] element.</msg>
<msg timestamp="20210709 11:46:13.751" level="INFO">Sending keys Qwerty1!</msg>
<status status="PASS" starttime="20210709 11:46:13.403" endtime="20210709 11:46:13.806"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:15.812" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:46:13.807" endtime="20210709 11:46:15.813"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Login_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:15.814" level="INFO">Clicking element '//tbody/tr[5]/td[1]'.</msg>
<status status="PASS" starttime="20210709 11:46:15.813" endtime="20210709 11:46:18.896"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:23.901" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210709 11:46:18.897" endtime="20210709 11:46:23.902"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>${Topology Overview}</arg>
<arg>15s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210709 11:46:23.902" endtime="20210709 11:46:23.919"/>
</kw>
<status status="PASS" starttime="20210709 11:46:03.090" endtime="20210709 11:46:23.919"/>
</kw>
<kw name="Go to WLAN Page" library="WLANPage">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210709 11:46:23.919" endtime="20210709 11:46:23.933"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_Tab}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:23.933" level="INFO">Clicking element '//a[normalize-space()='WLAN']'.</msg>
<status status="PASS" starttime="20210709 11:46:23.933" endtime="20210709 11:46:24.027"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:29.034" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210709 11:46:24.028" endtime="20210709 11:46:29.034"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>Access Points</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210709 11:46:29.034" endtime="20210709 11:46:29.046"/>
</kw>
<kw name="Select Frame" library="SeleniumLibrary">
<arg>id:frm_main2</arg>
<doc>Sets frame identified by ``locator`` as the current frame.</doc>
<msg timestamp="20210709 11:46:29.046" level="INFO">Selecting frame 'id:frm_main2'.</msg>
<status status="PASS" starttime="20210709 11:46:29.046" endtime="20210709 11:46:29.073"/>
</kw>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>${wlan_page}</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210709 11:46:29.090" level="INFO">Current frame contains text 'Restore WiFi Defaults'.</msg>
<status status="PASS" starttime="20210709 11:46:29.073" endtime="20210709 11:46:29.090"/>
</kw>
<status status="PASS" starttime="20210709 11:46:23.919" endtime="20210709 11:46:29.090"/>
</kw>
<kw name="Get the SSID name" library="WLANPage">
<var>${Orginal_ssid}</var>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>Channel</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210709 11:46:29.111" level="INFO">Current frame contains text 'Channel'.</msg>
<status status="PASS" starttime="20210709 11:46:29.090" endtime="20210709 11:46:29.111"/>
</kw>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<var>${current_ssid}</var>
<arg>${ssid_name_2.4G}</arg>
<arg>value</arg>
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<msg timestamp="20210709 11:46:29.146" level="INFO">${current_ssid} = jacques</msg>
<status status="PASS" starttime="20210709 11:46:29.111" endtime="20210709 11:46:29.146"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${current_ssid} is Current ssid</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:46:29.146" level="INFO">jacques is Current ssid</msg>
<status status="PASS" starttime="20210709 11:46:29.146" endtime="20210709 11:46:29.146"/>
</kw>
<msg timestamp="20210709 11:46:29.146" level="INFO">${Orginal_ssid} = jacques</msg>
<status status="PASS" starttime="20210709 11:46:29.090" endtime="20210709 11:46:29.146"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${Orginal_ssid}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20210709 11:46:29.146" level="INFO">${Orginal_ssid} = jacques</msg>
<status status="PASS" starttime="20210709 11:46:29.146" endtime="20210709 11:46:29.146"/>
</kw>
<kw name="Go to WLAN Guest Page" library="WLANGuestNetwork">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210709 11:46:29.146" endtime="20210709 11:46:29.159"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Guest_Network_Tab}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:29.159" level="INFO">Clicking element '//a[normalize-space()='Guest Network']'.</msg>
<status status="PASS" starttime="20210709 11:46:29.159" endtime="20210709 11:46:29.443"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:34.455" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210709 11:46:29.444" endtime="20210709 11:46:34.455"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>Guest Network</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210709 11:46:34.455" endtime="20210709 11:46:34.465"/>
</kw>
<kw name="Select Frame" library="SeleniumLibrary">
<arg>id:frm_main2</arg>
<doc>Sets frame identified by ``locator`` as the current frame.</doc>
<msg timestamp="20210709 11:46:34.465" level="INFO">Selecting frame 'id:frm_main2'.</msg>
<status status="PASS" starttime="20210709 11:46:34.465" endtime="20210709 11:46:34.487"/>
</kw>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>${Guest_Network_Page}</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210709 11:46:34.505" level="INFO">Current frame contains text 'Guest Network'.</msg>
<status status="PASS" starttime="20210709 11:46:34.487" endtime="20210709 11:46:34.505"/>
</kw>
<status status="PASS" starttime="20210709 11:46:29.146" endtime="20210709 11:46:34.506"/>
</kw>
<kw name="Disable Guest Network" library="WLANGuestNetwork">
<kw name="Get the Guest Network Status" library="WLANGuestNetwork">
<var>${current_GuestNetwork_Status}</var>
<kw name="Click WiFi Guest Edit button" library="WLANGuestNetwork">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Guest_Network_Edit_Button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:34.506" level="INFO">Clicking element '//tbody/tr[2]/td[5]/div/a/span[2]'.</msg>
<status status="PASS" starttime="20210709 11:46:34.506" endtime="20210709 11:46:34.850"/>
</kw>
<status status="PASS" starttime="20210709 11:46:34.506" endtime="20210709 11:46:34.851"/>
</kw>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<var>${current_GuestNetwork_Status}</var>
<arg>${Guest_SSID_ToggleBUtton}</arg>
<arg>class</arg>
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<msg timestamp="20210709 11:46:34.876" level="INFO">${current_GuestNetwork_Status} = switch_button switch_off</msg>
<status status="PASS" starttime="20210709 11:46:34.851" endtime="20210709 11:46:34.876"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${current_GuestNetwork_Status} is Current Guest Network Status</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:46:34.880" level="INFO">switch_button switch_off is Current Guest Network Status</msg>
<status status="PASS" starttime="20210709 11:46:34.876" endtime="20210709 11:46:34.880"/>
</kw>
<msg timestamp="20210709 11:46:34.881" level="INFO">${current_GuestNetwork_Status} = switch_button switch_off</msg>
<status status="PASS" starttime="20210709 11:46:34.506" endtime="20210709 11:46:34.881"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${status}</var>
<arg>${current_GuestNetwork_Status}</arg>
<arg>switch_off</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:46:34.882" level="INFO">${status} = ['switch_off']</msg>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</kw>
<if>
<branch type="IF" condition="${status}">
<kw name="Log" library="BuiltIn">
<arg>Guest Network is already disabled</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:46:34.882" level="INFO">Guest Network is already disabled</msg>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</kw>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</branch>
<branch type="ELSE">
<kw name="Disable Guest SSID Broadcast" library="WLANGuestNetwork">
<status status="NOT RUN" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</kw>
<status status="NOT RUN" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</branch>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:34.882"/>
</if>
<status status="PASS" starttime="20210709 11:46:34.506" endtime="20210709 11:46:34.882"/>
</kw>
<kw name="Save Guest WiFi Network Settings" library="WLANGuestNetwork">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Guest_SSID_SaveSetting}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:34.882" level="INFO">Clicking element '//tbody/tr[5]/td/div[1]/a/span[2]'.</msg>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:35.203"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:50.208" level="INFO">Slept 15 seconds</msg>
<status status="PASS" starttime="20210709 11:46:35.204" endtime="20210709 11:46:50.208"/>
</kw>
<status status="PASS" starttime="20210709 11:46:34.882" endtime="20210709 11:46:50.208"/>
</kw>
<kw name="Logout from DUT" library="CommonFunction">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210709 11:46:50.208" endtime="20210709 11:46:50.215"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Logout_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:46:50.215" level="INFO">Clicking element 'btn_logout'.</msg>
<status status="PASS" starttime="20210709 11:46:50.215" endtime="20210709 11:46:50.468"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:46:52.469" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:46:50.468" endtime="20210709 11:46:52.469"/>
</kw>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20210709 11:46:52.470" endtime="20210709 11:46:53.760"/>
</kw>
<status status="PASS" starttime="20210709 11:46:50.208" endtime="20210709 11:46:53.761"/>
</kw>
<status status="PASS" starttime="20210709 11:46:03.090" endtime="20210709 11:46:53.761"/>
</kw>
<test id="s1-s1-s1-s1-t1" name="Verify setting 5GHz ChannelID 36 with Bandwith 20 MHz">
<kw name="Login to DUT" library="CommonFunction" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${HOME_PAGE}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20210709 11:46:53.764" level="INFO">Opening browser 'firefox' to base url 'https://mijnmodem.kpn/login.htm'.</msg>
<msg timestamp="20210709 11:46:53.767" level="INFO">Firefox driver log is always forced to to: C:\Users\Atul Jain\Downloads\KPN\WiFi\Automation\results\geckodriver-27.log</msg>
<status status="PASS" starttime="20210709 11:46:53.764" endtime="20210709 11:47:05.432"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20210709 11:47:05.433" endtime="20210709 11:47:05.498"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:07.506" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:47:05.498" endtime="20210709 11:47:07.506"/>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>${Password}</arg>
<arg>${Password_value}</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<msg timestamp="20210709 11:47:07.509" level="INFO">Sending key(s) ('Qwerty1!',) to //input[@name='ui_pws'] element.</msg>
<msg timestamp="20210709 11:47:07.855" level="INFO">Sending keys Qwerty1!</msg>
<status status="PASS" starttime="20210709 11:47:07.507" endtime="20210709 11:47:07.898"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:09.901" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:47:07.898" endtime="20210709 11:47:09.901"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Login_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:09.901" level="INFO">Clicking element '//tbody/tr[5]/td[1]'.</msg>
<status status="PASS" starttime="20210709 11:47:09.901" endtime="20210709 11:47:12.796"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:17.806" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210709 11:47:12.796" endtime="20210709 11:47:17.806"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>${Topology Overview}</arg>
<arg>15s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210709 11:47:17.807" endtime="20210709 11:47:17.824"/>
</kw>
<status status="PASS" starttime="20210709 11:46:53.763" endtime="20210709 11:47:17.824"/>
</kw>
<kw name="Verify 5Ghz ChannelID scenarios">
<arg>36</arg>
<arg>2</arg>
<arg>1</arg>
<kw name="Go to WLAN Page" library="WLANPage">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210709 11:47:17.828" endtime="20210709 11:47:17.837"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_Tab}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:17.839" level="INFO">Clicking element '//a[normalize-space()='WLAN']'.</msg>
<status status="PASS" starttime="20210709 11:47:17.837" endtime="20210709 11:47:17.923"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:22.929" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210709 11:47:17.924" endtime="20210709 11:47:22.929"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>Access Points</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210709 11:47:22.930" endtime="20210709 11:47:22.946"/>
</kw>
<kw name="Select Frame" library="SeleniumLibrary">
<arg>id:frm_main2</arg>
<doc>Sets frame identified by ``locator`` as the current frame.</doc>
<msg timestamp="20210709 11:47:22.948" level="INFO">Selecting frame 'id:frm_main2'.</msg>
<status status="PASS" starttime="20210709 11:47:22.947" endtime="20210709 11:47:22.967"/>
</kw>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>${wlan_page}</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210709 11:47:22.987" level="INFO">Current frame contains text 'Restore WiFi Defaults'.</msg>
<status status="PASS" starttime="20210709 11:47:22.967" endtime="20210709 11:47:22.988"/>
</kw>
<status status="PASS" starttime="20210709 11:47:17.828" endtime="20210709 11:47:22.988"/>
</kw>
<kw name="Set 5Ghz Channel ID with value" library="WLANPage">
<arg>${ChannelID5_index}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_ChannelID_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:22.989" level="INFO">Clicking element '//tbody/tr[@id='tr_wchan_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210709 11:47:22.989" endtime="20210709 11:47:23.249"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:23.252" level="INFO">Clicking element '//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[2]/a'.</msg>
<status status="PASS" starttime="20210709 11:47:23.250" endtime="20210709 11:47:23.496"/>
</kw>
<status status="PASS" starttime="20210709 11:47:22.989" endtime="20210709 11:47:23.496"/>
</kw>
<kw name="Set 5Ghz Bandwith with value" library="WLANPage">
<arg>${5GHz_Bandwidth}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_Bandwidth_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:23.498" level="INFO">Clicking element '//tbody/tr[@id='tr_bandwidth_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210709 11:47:23.498" endtime="20210709 11:47:23.746"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:23.748" level="INFO">Clicking element '//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[1]/a'.</msg>
<status status="PASS" starttime="20210709 11:47:23.747" endtime="20210709 11:47:23.997"/>
</kw>
<status status="PASS" starttime="20210709 11:47:23.497" endtime="20210709 11:47:23.997"/>
</kw>
<kw name="Save the WiFi setting" library="WLANPage">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_save_setting}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:23.997" level="INFO">Clicking element '//*[@id="save"]/span[2]'.</msg>
<status status="PASS" starttime="20210709 11:47:23.997" endtime="20210709 11:47:24.302"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Handle Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Handle Alert" library="SeleniumLibrary">
<doc>Handles the current alert and returns its message.</doc>
<msg timestamp="20210709 11:47:24.304" level="INFO">HANDLE::&lt;class 'NoneType'&gt;::None</msg>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20210709 11:47:29.850" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-11.png"&gt;&lt;img src="selenium-screenshot-11.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20210709 11:47:29.453" endtime="20210709 11:47:29.850"/>
</kw>
<msg timestamp="20210709 11:47:29.851" level="FAIL">Alert not found in 5 seconds.</msg>
<status status="FAIL" starttime="20210709 11:47:24.304" endtime="20210709 11:47:29.851"/>
</kw>
<status status="PASS" starttime="20210709 11:47:24.303" endtime="20210709 11:47:29.851"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:44.858" level="INFO">Slept 15 seconds</msg>
<status status="PASS" starttime="20210709 11:47:29.851" endtime="20210709 11:47:44.859"/>
</kw>
<status status="PASS" starttime="20210709 11:47:23.997" endtime="20210709 11:47:44.859"/>
</kw>
<kw name="Logout from DUT" library="CommonFunction">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210709 11:47:44.860" endtime="20210709 11:47:44.860"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Logout_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210709 11:47:44.860" level="INFO">Clicking element 'btn_logout'.</msg>
<status status="PASS" starttime="20210709 11:47:44.860" endtime="20210709 11:47:45.119"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:47:47.123" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210709 11:47:45.119" endtime="20210709 11:47:47.123"/>
</kw>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20210709 11:47:47.123" endtime="20210709 11:47:48.601"/>
</kw>
<status status="PASS" starttime="20210709 11:47:44.860" endtime="20210709 11:47:48.601"/>
</kw>
<kw name="Telnet to DUT Console" library="Telnet">
<kw name="Open Connection" library="Telnet">
<arg>192.168.2.254</arg>
<arg>prompt_is_regexp=yes</arg>
<arg>prompt=#</arg>
<doc>Opens a new Telnet connection to the given host and port.</doc>
<msg timestamp="20210709 11:47:48.602" level="INFO">Opening connection to 192.168.2.254:23 with prompt: # (regexp)</msg>
<status status="PASS" starttime="20210709 11:47:48.602" endtime="20210709 11:47:48.604"/>
</kw>
<kw name="Login" library="Telnet">
<arg>ls</arg>
<arg>date</arg>
<arg>login_prompt=#</arg>
<arg>password_prompt=#</arg>
<doc>Logs in to the Telnet server with the given user information.</doc>
<msg timestamp="20210709 11:47:48.769" level="INFO">BusyBox v1.26.2 (2020-06-23 18:38:50 CST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

# ls
[1;34mbin[0m      [1;34mdev[0m      [1;36mmnt[0m      [1;34mproc[0m     [1;34msys[0m      [1;36mvar[0m
[1;34mbootfs[0m   [1;36metc[0m      [1;36mopt[0m      [1;34mramdisk[0m  [1;34mtmp[0m      [1;34mwww[0m
[1;34mdata[0m     [1;34mlib[0m      [1;34mowl[0m      [1;34msbin[0m     [1;34musr[0m
# date
Thu Jan  1 01:28:07 UTC 1970
#</msg>
<status status="PASS" starttime="20210709 11:47:48.605" endtime="20210709 11:47:48.770"/>
</kw>
<status status="PASS" starttime="20210709 11:47:48.602" endtime="20210709 11:47:48.771"/>
</kw>
<kw name="Get the 5Ghz channel id from console" library="Telnet">
<var>${5Ghz_ChannelID_Console}</var>
<kw name="Execute Command" library="Telnet">
<var>${out_5Ghz}</var>
<arg>cat /etc/config/.glbcfg |grep 5G_Channel=</arg>
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<msg timestamp="20210709 11:47:48.776" level="INFO">cat /etc/config/.glbcfg |grep 5G_Channel=</msg>
<msg timestamp="20210709 11:47:48.888" level="INFO">ARC_WLAN_5G_Channel=36
#</msg>
<msg timestamp="20210709 11:47:48.888" level="INFO">${out_5Ghz} = ARC_WLAN_5G_Channel=36
#</msg>
<status status="PASS" starttime="20210709 11:47:48.773" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${out_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:47:48.888" level="INFO">ARC_WLAN_5G_Channel=36
#</msg>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${result_5Ghz}</var>
<arg>${out_5Ghz}</arg>
<arg>=(\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:47:48.888" level="INFO">${result_5Ghz} = ['36']</msg>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>5Ghz Channel ID from console is ${result_5Ghz[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:47:48.888" level="INFO">5Ghz Channel ID from console is 36</msg>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.888"/>
</kw>
<msg timestamp="20210709 11:47:48.888" level="INFO">${5Ghz_ChannelID_Console} = 36</msg>
<status status="PASS" starttime="20210709 11:47:48.771" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Channel ID from Console is ${5Ghz_ChannelID_Console}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:47:48.888" level="INFO">Channel ID from Console is 36</msg>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Close All Connections" library="Telnet">
<doc>Closes all open connections and empties the connection cache.</doc>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.888"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${5Ghz_ChannelID_Console}</arg>
<arg>${5GHz_Channel}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20210709 11:47:48.888" endtime="20210709 11:47:48.897"/>
</kw>
<if>
<branch type="IF" condition="${5GHz_Channel} &lt; 100">
<kw name="Sleep" library="BuiltIn">
<arg>60s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:48:48.907" level="INFO">Slept 1 minute</msg>
<status status="PASS" starttime="20210709 11:47:48.897" endtime="20210709 11:48:48.907"/>
</kw>
<status status="PASS" starttime="20210709 11:47:48.897" endtime="20210709 11:48:48.907"/>
</branch>
<branch type="ELSE">
<kw name="Sleep" library="BuiltIn">
<arg>180s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20210709 11:48:48.908" endtime="20210709 11:48:48.908"/>
</kw>
<status status="NOT RUN" starttime="20210709 11:48:48.907" endtime="20210709 11:48:48.909"/>
</branch>
<status status="PASS" starttime="20210709 11:47:48.897" endtime="20210709 11:48:48.909"/>
</if>
<for flavor="IN RANGE">
<var>${VAR}</var>
<value>14</value>
<iter>
<var name="${VAR}">0</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:48:48.913" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:48:48.911" endtime="20210709 11:48:48.913"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:48:48.915" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:48:48.923" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:48:49.550" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:48:48.914" endtime="20210709 11:48:49.551"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:48:49.552" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:48:49.555" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:48:50.217" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:48:50.217" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:48:49.551" endtime="20210709 11:48:50.217"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:48:50.217" level="INFO"/>
<status status="PASS" starttime="20210709 11:48:50.217" endtime="20210709 11:48:50.217"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:48:50.221" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:48:50.220" endtime="20210709 11:48:50.221"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:48:50.225" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:48:50.224" endtime="20210709 11:48:50.225"/>
</kw>
<msg timestamp="20210709 11:48:50.226" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:48:48.910" endtime="20210709 11:48:50.226"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:48:50.226" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:48:50.226" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:48:50.226" endtime="20210709 11:48:50.226"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:48:50.226" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:48:50.226" endtime="20210709 11:48:50.226"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:48:50.226" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:48:50.226" endtime="20210709 11:48:50.226"/>
</kw>
<msg timestamp="20210709 11:48:50.226" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:48:50.226" endtime="20210709 11:48:50.226"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:48:50.226" endtime="20210709 11:48:50.226"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:49:20.238" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:48:50.226" endtime="20210709 11:49:20.239"/>
</kw>
<status status="PASS" starttime="20210709 11:48:48.909" endtime="20210709 11:49:20.239"/>
</iter>
<iter>
<var name="${VAR}">1</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:49:20.242" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:49:20.241" endtime="20210709 11:49:20.243"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:49:20.244" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:49:20.257" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:49:20.984" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:49:20.243" endtime="20210709 11:49:20.984"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:49:20.985" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:49:20.986" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:49:21.688" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:49:21.688" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:49:20.984" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:21.688" level="INFO"/>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:49:21.688" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:21.688" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<msg timestamp="20210709 11:49:21.688" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:49:20.240" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:49:21.688" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:49:21.688" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:21.688" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:49:21.688" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<msg timestamp="20210709 11:49:21.688" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:21.688"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:49:51.695" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:49:21.688" endtime="20210709 11:49:51.696"/>
</kw>
<status status="PASS" starttime="20210709 11:49:20.239" endtime="20210709 11:49:51.696"/>
</iter>
<iter>
<var name="${VAR}">2</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:49:51.698" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:49:51.698" endtime="20210709 11:49:51.698"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:49:51.698" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:49:51.712" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:49:52.406" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:49:51.698" endtime="20210709 11:49:52.406"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:49:52.406" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:49:52.414" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:49:52.974" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:49:52.974" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:49:52.406" endtime="20210709 11:49:52.974"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:52.975" level="INFO"/>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:49:52.975" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:52.975" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<msg timestamp="20210709 11:49:52.975" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:49:51.697" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:49:52.975" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:49:52.975" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:49:52.975" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:49:52.975" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<msg timestamp="20210709 11:49:52.975" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:49:52.975" endtime="20210709 11:49:52.975"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:49:52.986" endtime="20210709 11:49:52.986"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:50:22.991" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:49:52.986" endtime="20210709 11:50:22.991"/>
</kw>
<status status="PASS" starttime="20210709 11:49:51.696" endtime="20210709 11:50:22.991"/>
</iter>
<iter>
<var name="${VAR}">3</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:50:22.992" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:50:22.992" endtime="20210709 11:50:22.992"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:50:22.992" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:50:23.008" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:50:23.637" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:50:22.992" endtime="20210709 11:50:23.637"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:50:23.638" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:50:23.640" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:50:24.204" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:50:24.204" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:50:23.637" endtime="20210709 11:50:24.204"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:24.205" level="INFO"/>
<status status="PASS" starttime="20210709 11:50:24.204" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:50:24.205" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:24.205" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<msg timestamp="20210709 11:50:24.205" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:50:22.992" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:50:24.205" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:50:24.205" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:24.205" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:50:24.205" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<msg timestamp="20210709 11:50:24.205" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:24.205"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:50:54.216" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:50:24.205" endtime="20210709 11:50:54.216"/>
</kw>
<status status="PASS" starttime="20210709 11:50:22.992" endtime="20210709 11:50:54.216"/>
</iter>
<iter>
<var name="${VAR}">4</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:50:54.220" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:50:54.219" endtime="20210709 11:50:54.220"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:50:54.221" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:50:54.234" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:50:54.785" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:50:54.221" endtime="20210709 11:50:54.785"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:50:54.786" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:50:54.793" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:50:55.468" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:50:55.469" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:50:54.786" endtime="20210709 11:50:55.469"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:55.470" level="INFO"/>
<status status="PASS" starttime="20210709 11:50:55.469" endtime="20210709 11:50:55.470"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:50:55.470" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:50:55.470" endtime="20210709 11:50:55.470"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:55.474" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:50:55.470" endtime="20210709 11:50:55.474"/>
</kw>
<msg timestamp="20210709 11:50:55.474" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:50:54.217" endtime="20210709 11:50:55.474"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:50:55.474" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:50:55.476" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:50:55.474" endtime="20210709 11:50:55.476"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:50:55.476" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:50:55.476" endtime="20210709 11:50:55.477"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:50:55.477" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:50:55.477" endtime="20210709 11:50:55.477"/>
</kw>
<msg timestamp="20210709 11:50:55.477" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:50:55.477" endtime="20210709 11:50:55.477"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:50:55.477" endtime="20210709 11:50:55.477"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:51:25.491" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:50:55.477" endtime="20210709 11:51:25.491"/>
</kw>
<status status="PASS" starttime="20210709 11:50:54.217" endtime="20210709 11:51:25.491"/>
</iter>
<iter>
<var name="${VAR}">5</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:51:25.495" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:51:25.493" endtime="20210709 11:51:25.495"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:51:25.496" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:51:25.496" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:51:26.155" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:51:25.496" endtime="20210709 11:51:26.156"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:51:26.157" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:51:26.165" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:51:26.786" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:51:26.786" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:51:26.156" endtime="20210709 11:51:26.786"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:26.790" level="INFO"/>
<status status="PASS" starttime="20210709 11:51:26.786" endtime="20210709 11:51:26.790"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:51:26.795" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:51:26.791" endtime="20210709 11:51:26.795"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:26.796" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:51:26.795" endtime="20210709 11:51:26.796"/>
</kw>
<msg timestamp="20210709 11:51:26.797" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:51:25.492" endtime="20210709 11:51:26.797"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:51:26.798" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:51:26.799" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:51:26.798" endtime="20210709 11:51:26.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:26.801" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:51:26.800" endtime="20210709 11:51:26.801"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:51:26.803" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:51:26.802" endtime="20210709 11:51:26.803"/>
</kw>
<msg timestamp="20210709 11:51:26.804" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:51:26.801" endtime="20210709 11:51:26.805"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:51:26.805" endtime="20210709 11:51:26.806"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:51:56.811" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:51:26.806" endtime="20210709 11:51:56.811"/>
</kw>
<status status="PASS" starttime="20210709 11:51:25.492" endtime="20210709 11:51:56.811"/>
</iter>
<iter>
<var name="${VAR}">6</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:51:56.815" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:51:56.814" endtime="20210709 11:51:56.815"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:51:56.817" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:51:56.826" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:51:57.413" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:51:56.816" endtime="20210709 11:51:57.413"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:51:57.414" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:51:57.441" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:51:58.179" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:51:58.179" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:51:57.413" endtime="20210709 11:51:58.179"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:58.181" level="INFO"/>
<status status="PASS" starttime="20210709 11:51:58.180" endtime="20210709 11:51:58.181"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:51:58.184" level="INFO">${Analyser_ChannelID_5Ghz} = []</msg>
<status status="PASS" starttime="20210709 11:51:58.181" endtime="20210709 11:51:58.184"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:58.184" level="INFO">Analyser Channel IDs are []</msg>
<status status="PASS" starttime="20210709 11:51:58.184" endtime="20210709 11:51:58.185"/>
</kw>
<msg timestamp="20210709 11:51:58.185" level="INFO">${5Ghz_ChannelID_Analyser} = []</msg>
<status status="PASS" starttime="20210709 11:51:56.812" endtime="20210709 11:51:58.185"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:51:58.185" level="INFO">Length is 0</msg>
<msg timestamp="20210709 11:51:58.186" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 0</msg>
<status status="PASS" starttime="20210709 11:51:58.185" endtime="20210709 11:51:58.186"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:51:58.186" level="INFO">ChannelIDs are [] and Length of ChannelIDs is 0</msg>
<status status="PASS" starttime="20210709 11:51:58.186" endtime="20210709 11:51:58.186"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210709 11:51:58.188" level="FAIL">[ ] does not contain value '36'.</msg>
<status status="FAIL" starttime="20210709 11:51:58.188" endtime="20210709 11:51:58.189"/>
</kw>
<msg timestamp="20210709 11:51:58.189" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210709 11:51:58.186" endtime="20210709 11:51:58.189"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210709 11:51:58.189" endtime="20210709 11:51:58.190"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210709 11:52:28.192" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210709 11:51:58.190" endtime="20210709 11:52:28.192"/>
</kw>
<status status="PASS" starttime="20210709 11:51:56.812" endtime="20210709 11:52:28.193"/>
</iter>
<iter>
<var name="${VAR}">7</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${cmd}</var>
<arg>netsh wlan show network mode=bssid | Select-String -Pattern "${SSID}" -Context 1,16</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:52:28.196" level="INFO">${cmd} = netsh wlan show network mode=bssid | Select-String -Pattern "jacques" -Context 1,16</msg>
<status status="PASS" starttime="20210709 11:52:28.195" endtime="20210709 11:52:28.197"/>
</kw>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:52:28.198" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:52:28.209" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:52:28.860" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210709 11:52:28.197" endtime="20210709 11:52:28.860"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:52:28.860" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210709 11:52:28.860" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:52:29.463" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:52:29.464" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:52:28.860" endtime="20210709 11:52:29.464"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">
  
&gt; SSID 14 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:66
           Signal             : 99%  
           Radio type         : 802.11ac
           Channel            : 36 
           Basic rates (Mbps) : 6 12 24
           Other rates (Mbps) : 9 18 36 48 54
      BSSID 2                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 1 
           Basic rates (Mbps) : 1 2 5.5 11
           Other rates (Mbps) : 6 9 12 18 24 36 48 54
  

</msg>
<status status="PASS" starttime="20210709 11:52:29.464" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">${Analyser_ChannelID_5Ghz} = ['36', '1']</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">Analyser Channel IDs are ['36', '1']</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<msg timestamp="20210709 11:52:29.465" level="INFO">${5Ghz_ChannelID_Analyser} = ['36', '1']</msg>
<status status="PASS" starttime="20210709 11:52:28.194" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">Length is 2</msg>
<msg timestamp="20210709 11:52:29.465" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 2</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">ChannelIDs are ['36', '1'] and Length of ChannelIDs is 2</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<msg timestamp="20210709 11:52:29.465" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<status status="PASS" starttime="20210709 11:52:28.193" endtime="20210709 11:52:29.465"/>
</iter>
<status status="PASS" starttime="20210709 11:48:48.909" endtime="20210709 11:52:29.465"/>
</for>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.465"/>
</kw>
<kw name="Connect to SSID" library="CommonWindowsFunction">
<var>${Connection_status}</var>
<arg>${Orginal_ssid}</arg>
<kw name="Add WiFi Profile" library="CommonWindowsFunction">
<arg>${SSID}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${profile_name}</var>
<arg>Wi-Fi-${SSID}.xml</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:52:29.465" level="INFO">${profile_name} = Wi-Fi-jacques.xml</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.480"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${add_profile_cmd}</var>
<arg>netsh wlan add profile filename=\"WiFiProfile\\${profile_name}"</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:52:29.482" level="INFO">${add_profile_cmd} = netsh wlan add profile filename="WiFiProfile\Wi-Fi-jacques.xml"</msg>
<status status="PASS" starttime="20210709 11:52:29.481" endtime="20210709 11:52:29.482"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${add_profile_cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:52:29.484" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan add profile filename=\"WiFiProfile\Wi-Fi-jacques.xml\""</msg>
<msg timestamp="20210709 11:52:29.492" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:52:29.997" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:52:29.997" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:52:29.482" endtime="20210709 11:52:29.997"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:52:29.999" level="INFO">Profile jacques is added on interface Wi-Fi.</msg>
<status status="PASS" starttime="20210709 11:52:29.998" endtime="20210709 11:52:29.999"/>
</kw>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:29.999"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${Connect_SSID}</var>
<arg>netsh wlan connect name="${SSID}" ssid="${SSID}" interface="Wi-Fi"</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210709 11:52:29.999" level="INFO">${Connect_SSID} = netsh wlan connect name="jacques" ssid="jacques" interface="Wi-Fi"</msg>
<status status="PASS" starttime="20210709 11:52:29.999" endtime="20210709 11:52:29.999"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${Connect_SSID}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210709 11:52:29.999" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan connect name=\"jacques\" ssid=\"jacques\" interface=\"Wi-Fi\""</msg>
<msg timestamp="20210709 11:52:29.999" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210709 11:52:30.686" level="INFO">Process completed.</msg>
<msg timestamp="20210709 11:52:30.686" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210709 11:52:29.999" endtime="20210709 11:52:30.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210709 11:52:30.690" level="INFO">Connection request was completed successfully.</msg>
<status status="PASS" starttime="20210709 11:52:30.687" endtime="20210709 11:52:30.690"/>
</kw>
<msg timestamp="20210709 11:52:30.693" level="INFO">${Connection_status} = Connection request was completed successfully.</msg>
<status status="PASS" starttime="20210709 11:52:29.465" endtime="20210709 11:52:30.693"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>"Connection request was completed successfully" in """${Connection_status}"""</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20210709 11:52:30.694" endtime="20210709 11:52:30.695"/>
</kw>
<kw name="Ping to Gateway" library="CommonWindowsFunction">
<var>${Ping_Status}</var>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${ping_gateway}</arg>
<arg>shell=True