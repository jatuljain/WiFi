<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.1 (Python 3.9.4 on win32)" generated="20210623 14:57:45.240" rpa="false" schemaversion="2">
<suite id="s1" name="WLAN 5GHzChannelID" source="D:\Personal\Automation\KPN\WiFi\Tests\WLAN_5GHzChannelID.robot">
<test id="s1-t1" name="Verify setting 5GHz ChannelID 120 with Bandwith 20/40/80 MHz">
<kw name="Login to DUT" library="CommonFunction" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${HOME_PAGE}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20210623 14:57:45.690" level="INFO">Opening browser 'firefox' to base url 'https://mijnmodem.kpn/login.htm'.</msg>
<msg timestamp="20210623 14:57:45.692" level="INFO">Firefox driver log is always forced to to: D:\Personal\Automation\KPN\WiFi\result\geckodriver-9.log</msg>
<status status="PASS" starttime="20210623 14:57:45.689" endtime="20210623 14:57:58.007"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20210623 14:57:58.008" endtime="20210623 14:57:58.024"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:00.031" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 14:57:58.025" endtime="20210623 14:58:00.032"/>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>${Password}</arg>
<arg>${Password_value}</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<msg timestamp="20210623 14:58:00.035" level="INFO">Sending key(s) ('Qwerty1!',) to //input[@name='ui_pws'] element.</msg>
<msg timestamp="20210623 14:58:00.354" level="INFO">Sending keys Qwerty1!</msg>
<status status="PASS" starttime="20210623 14:58:00.033" endtime="20210623 14:58:00.402"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:02.410" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 14:58:00.402" endtime="20210623 14:58:02.410"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Login_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:02.411" level="INFO">Clicking element '//tbody/tr[5]/td[1]'.</msg>
<status status="PASS" starttime="20210623 14:58:02.410" endtime="20210623 14:58:04.269"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:09.283" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210623 14:58:04.269" endtime="20210623 14:58:09.283"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>${Topology Overview}</arg>
<arg>15s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210623 14:58:09.284" endtime="20210623 14:58:09.293"/>
</kw>
<status status="PASS" starttime="20210623 14:57:45.687" endtime="20210623 14:58:09.294"/>
</kw>
<kw name="Verify 5Ghz ChannelID scenarios">
<arg>120</arg>
<arg>15</arg>
<arg>3</arg>
<tag>5GhzChannelIDSet</tag>
<tag>Funtional</tag>
<tag>WiFi</tag>
<doc>This Test case is to verify setting different channel and Bandwith</doc>
<kw name="Go to WLAN Page" library="WLANPage">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_Tab}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:09.297" level="INFO">Clicking element '//a[normalize-space()='WLAN']'.</msg>
<status status="PASS" starttime="20210623 14:58:09.297" endtime="20210623 14:58:09.365"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:14.370" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210623 14:58:09.365" endtime="20210623 14:58:14.370"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>Access Points</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210623 14:58:14.371" endtime="20210623 14:58:14.378"/>
</kw>
<kw name="Select Frame" library="SeleniumLibrary">
<arg>id:frm_main2</arg>
<doc>Sets frame identified by ``locator`` as the current frame.</doc>
<msg timestamp="20210623 14:58:14.378" level="INFO">Selecting frame 'id:frm_main2'.</msg>
<status status="PASS" starttime="20210623 14:58:14.378" endtime="20210623 14:58:14.388"/>
</kw>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>${wlan_page}</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210623 14:58:14.396" level="INFO">Current frame contains text 'Restore WiFi Defaults'.</msg>
<status status="PASS" starttime="20210623 14:58:14.389" endtime="20210623 14:58:14.396"/>
</kw>
<status status="PASS" starttime="20210623 14:58:09.296" endtime="20210623 14:58:14.396"/>
</kw>
<kw name="Set 5Ghz Channel ID with value" library="WLANPage">
<arg>${ChannelID5_index}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_ChannelID_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:14.398" level="INFO">Clicking element '//tbody/tr[@id='tr_wchan_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210623 14:58:14.397" endtime="20210623 14:58:14.628"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:14.629" level="INFO">Clicking element '//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[15]/a'.</msg>
<status status="PASS" starttime="20210623 14:58:14.628" endtime="20210623 14:58:14.854"/>
</kw>
<status status="PASS" starttime="20210623 14:58:14.397" endtime="20210623 14:58:14.854"/>
</kw>
<kw name="Set 5Ghz Bandwith with value" library="WLANPage">
<arg>${5GHz_Bandwidth}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_Bandwidth_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:14.855" level="INFO">Clicking element '//tbody/tr[@id='tr_bandwidth_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210623 14:58:14.855" endtime="20210623 14:58:15.078"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:15.079" level="INFO">Clicking element '//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[3]/a'.</msg>
<status status="PASS" starttime="20210623 14:58:15.078" endtime="20210623 14:58:15.304"/>
</kw>
<status status="PASS" starttime="20210623 14:58:14.854" endtime="20210623 14:58:15.305"/>
</kw>
<kw name="Save the WiFi setting" library="WLANPage">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_save_setting}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:15.306" level="INFO">Clicking element '//*[@id="save"]/span[2]'.</msg>
<status status="PASS" starttime="20210623 14:58:15.305" endtime="20210623 14:58:15.593"/>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<arg>${TEST_NAME}.png</arg>
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20210623 14:58:15.701" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Verify%20setting%205GHz%20ChannelID%20120%20with%20Bandwith%2020/40/80%20MHz.png"&gt;&lt;img src="Verify%20setting%205GHz%20ChannelID%20120%20with%20Bandwith%2020/40/80%20MHz.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20210623 14:58:15.593" endtime="20210623 14:58:15.701"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:30.719" level="INFO">Slept 15 seconds</msg>
<status status="PASS" starttime="20210623 14:58:15.703" endtime="20210623 14:58:30.720"/>
</kw>
<status status="PASS" starttime="20210623 14:58:15.305" endtime="20210623 14:58:30.720"/>
</kw>
<kw name="Logout from DUT" library="CommonFunction">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210623 14:58:30.722" endtime="20210623 14:58:30.728"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Logout_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 14:58:30.729" level="INFO">Clicking element 'btn_logout'.</msg>
<status status="PASS" starttime="20210623 14:58:30.728" endtime="20210623 14:58:30.988"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 14:58:33.001" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 14:58:30.989" endtime="20210623 14:58:33.001"/>
</kw>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20210623 14:58:33.001" endtime="20210623 14:58:34.670"/>
</kw>
<status status="PASS" starttime="20210623 14:58:30.721" endtime="20210623 14:58:34.670"/>
</kw>
<kw name="Telnet to DUT Console" library="Telnet">
<kw name="Open Connection" library="Telnet">
<arg>192.168.2.254</arg>
<arg>prompt_is_regexp=yes</arg>
<arg>prompt=#</arg>
<doc>Opens a new Telnet connection to the given host and port.</doc>
<msg timestamp="20210623 14:58:34.672" level="INFO">Opening connection to 192.168.2.254:23 with prompt: # (regexp)</msg>
<status status="PASS" starttime="20210623 14:58:34.671" endtime="20210623 14:58:34.673"/>
</kw>
<kw name="Login" library="Telnet">
<arg>ls</arg>
<arg>date</arg>
<arg>login_prompt=#</arg>
<arg>password_prompt=#</arg>
<doc>Logs in to the Telnet server with the given user information.</doc>
<msg timestamp="20210623 14:58:34.838" level="INFO">BusyBox v1.26.2 (2020-06-23 18:38:50 CST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

# ls
[1;34mbin[0m      [1;34mdev[0m      [1;36mmnt[0m      [1;34mproc[0m     [1;34msys[0m      [1;36mvar[0m
[1;34mbootfs[0m   [1;36metc[0m      [1;36mopt[0m      [1;34mramdisk[0m  [1;34mtmp[0m      [1;34mwww[0m
[1;34mdata[0m     [1;34mlib[0m      [1;34mowl[0m      [1;34msbin[0m     [1;34musr[0m
# date
Thu Jan  1 05:52:55 UTC 1970
#</msg>
<status status="PASS" starttime="20210623 14:58:34.674" endtime="20210623 14:58:34.838"/>
</kw>
<status status="PASS" starttime="20210623 14:58:34.670" endtime="20210623 14:58:34.838"/>
</kw>
<kw name="Get the 5Ghz channel id from console" library="Telnet">
<var>${5Ghz_ChannelID_Console}</var>
<kw name="Execute Command" library="Telnet">
<var>${out_5Ghz}</var>
<arg>cat /etc/config/.glbcfg |grep 5G_Channel=</arg>
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<msg timestamp="20210623 14:58:34.841" level="INFO">cat /etc/config/.glbcfg |grep 5G_Channel=</msg>
<msg timestamp="20210623 14:58:34.946" level="INFO">ARC_WLAN_5G_Channel=120
#</msg>
<msg timestamp="20210623 14:58:34.946" level="INFO">${out_5Ghz} = ARC_WLAN_5G_Channel=120
#</msg>
<status status="PASS" starttime="20210623 14:58:34.839" endtime="20210623 14:58:34.946"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${out_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 14:58:34.946" level="INFO">ARC_WLAN_5G_Channel=120
#</msg>
<status status="PASS" starttime="20210623 14:58:34.946" endtime="20210623 14:58:34.947"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${result_5Ghz}</var>
<arg>${out_5Ghz}</arg>
<arg>=(\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 14:58:34.948" level="INFO">${result_5Ghz} = ['120']</msg>
<status status="PASS" starttime="20210623 14:58:34.947" endtime="20210623 14:58:34.948"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>5Ghz Channel ID from console is ${result_5Ghz[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 14:58:34.949" level="INFO">5Ghz Channel ID from console is 120</msg>
<status status="PASS" starttime="20210623 14:58:34.948" endtime="20210623 14:58:34.949"/>
</kw>
<msg timestamp="20210623 14:58:34.950" level="INFO">${5Ghz_ChannelID_Console} = 120</msg>
<status status="PASS" starttime="20210623 14:58:34.838" endtime="20210623 14:58:34.950"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Channel ID from Console is ${5Ghz_ChannelID_Console}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 14:58:34.951" level="INFO">Channel ID from Console is 120</msg>
<status status="PASS" starttime="20210623 14:58:34.950" endtime="20210623 14:58:34.951"/>
</kw>
<kw name="Close All Connections" library="Telnet">
<doc>Closes all open connections and empties the connection cache.</doc>
<status status="PASS" starttime="20210623 14:58:34.951" endtime="20210623 14:58:34.951"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${5Ghz_ChannelID_Console}</arg>
<arg>${5GHz_Channel}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20210623 14:58:34.951" endtime="20210623 14:58:34.952"/>
</kw>
<if>
<branch type="IF" condition="${5GHz_Channel} &lt; 100">
<kw name="Sleep" library="BuiltIn">
<arg>60s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20210623 14:58:34.952" endtime="20210623 14:58:34.952"/>
</kw>
<status status="NOT RUN" starttime="20210623 14:58:34.952" endtime="20210623 14:58:34.952"/>
</branch>
<branch type="ELSE">
<kw name="Sleep" library="BuiltIn">
<arg>180s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:01:34.962" level="INFO">Slept 3 minutes</msg>
<status status="PASS" starttime="20210623 14:58:34.952" endtime="20210623 15:01:34.962"/>
</kw>
<status status="PASS" starttime="20210623 14:58:34.952" endtime="20210623 15:01:34.962"/>
</branch>
<status status="PASS" starttime="20210623 14:58:34.952" endtime="20210623 15:01:34.962"/>
</if>
<for flavor="IN RANGE">
<var>${VAR}</var>
<value>14</value>
<iter>
<var name="${VAR}">0</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:01:34.964" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:01:34.972" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:01:35.807" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:01:34.963" endtime="20210623 15:01:35.807"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:01:35.808" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:01:35.811" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:01:36.359" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:01:36.359" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:01:35.807" endtime="20210623 15:01:36.359"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:01:36.361" level="INFO">
  
&gt; SSID 10 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 11 : Ziggo26361
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 70:54:d2:a4:51:73
           Signal             : 65%  

</msg>
<status status="PASS" starttime="20210623 15:01:36.360" endtime="20210623 15:01:36.361"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:01:36.363" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:01:36.361" endtime="20210623 15:01:36.363"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:01:36.363" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:01:36.363" endtime="20210623 15:01:36.363"/>
</kw>
<msg timestamp="20210623 15:01:36.363" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:01:34.963" endtime="20210623 15:01:36.363"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:01:36.364" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:01:36.364" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:01:36.364" endtime="20210623 15:01:36.364"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:01:36.364" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:01:36.364" endtime="20210623 15:01:36.364"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:01:36.365" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:01:36.365" endtime="20210623 15:01:36.365"/>
</kw>
<msg timestamp="20210623 15:01:36.365" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:01:36.365" endtime="20210623 15:01:36.366"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:01:36.366" endtime="20210623 15:01:36.366"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:02:06.374" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:01:36.366" endtime="20210623 15:02:06.374"/>
</kw>
<status status="PASS" starttime="20210623 15:01:34.963" endtime="20210623 15:02:06.375"/>
</iter>
<iter>
<var name="${VAR}">1</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:02:06.376" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:02:06.380" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:02:06.946" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:02:06.375" endtime="20210623 15:02:06.946"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:02:06.947" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:02:06.950" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:02:07.493" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:02:07.493" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:02:06.946" endtime="20210623 15:02:07.493"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:07.494" level="INFO">
  
&gt; SSID 3 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 4 : ASUS
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : d8:50:e6:93:eb:b8
           Signal             : 48%  

</msg>
<status status="PASS" starttime="20210623 15:02:07.493" endtime="20210623 15:02:07.494"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:02:07.496" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:02:07.495" endtime="20210623 15:02:07.496"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:07.496" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:02:07.496" endtime="20210623 15:02:07.496"/>
</kw>
<msg timestamp="20210623 15:02:07.496" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:02:06.375" endtime="20210623 15:02:07.496"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:02:07.497" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:02:07.497" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:02:07.497" endtime="20210623 15:02:07.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:07.498" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:02:07.497" endtime="20210623 15:02:07.498"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:02:07.499" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:02:07.498" endtime="20210623 15:02:07.499"/>
</kw>
<msg timestamp="20210623 15:02:07.499" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:02:07.498" endtime="20210623 15:02:07.499"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:02:07.499" endtime="20210623 15:02:07.500"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:02:37.507" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:02:07.500" endtime="20210623 15:02:37.507"/>
</kw>
<status status="PASS" starttime="20210623 15:02:06.375" endtime="20210623 15:02:37.508"/>
</iter>
<iter>
<var name="${VAR}">2</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:02:37.510" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:02:37.514" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:02:38.274" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:02:37.509" endtime="20210623 15:02:38.275"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:02:38.277" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:02:38.284" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:02:38.856" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:02:38.857" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:02:38.275" endtime="20210623 15:02:38.857"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:38.858" level="INFO">
  
&gt; SSID 10 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 76%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 11 : VRV95170E11BB
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : bc:30:d9:0e:11:bb
           Signal             : 55%  

</msg>
<status status="PASS" starttime="20210623 15:02:38.857" endtime="20210623 15:02:38.858"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:02:38.860" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:02:38.859" endtime="20210623 15:02:38.860"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:38.860" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:02:38.860" endtime="20210623 15:02:38.860"/>
</kw>
<msg timestamp="20210623 15:02:38.860" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:02:37.508" endtime="20210623 15:02:38.860"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:02:38.861" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:02:38.861" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:02:38.861" endtime="20210623 15:02:38.861"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:02:38.862" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:02:38.861" endtime="20210623 15:02:38.862"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:02:38.862" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:02:38.862" endtime="20210623 15:02:38.862"/>
</kw>
<msg timestamp="20210623 15:02:38.863" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:02:38.862" endtime="20210623 15:02:38.863"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:02:38.863" endtime="20210623 15:02:38.863"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:03:08.866" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:02:38.863" endtime="20210623 15:03:08.866"/>
</kw>
<status status="PASS" starttime="20210623 15:02:37.508" endtime="20210623 15:03:08.866"/>
</iter>
<iter>
<var name="${VAR}">3</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:03:08.867" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:03:08.871" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:03:09.425" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:03:08.867" endtime="20210623 15:03:09.425"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:03:09.426" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:03:09.429" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:03:09.955" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:03:09.956" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:03:09.425" endtime="20210623 15:03:09.956"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:09.957" level="INFO">
  
&gt; SSID 1 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 2 : Ziggo
      Network type            : Infrastructure
      Authentication          : WPA2-Enterprise
      Encryption              : CCMP 
      BSSID 1                 : 56:67:11:10:2c:43
           Signal             : 31%  

</msg>
<status status="PASS" starttime="20210623 15:03:09.956" endtime="20210623 15:03:09.957"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:03:09.959" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:03:09.958" endtime="20210623 15:03:09.959"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:09.959" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:03:09.959" endtime="20210623 15:03:09.959"/>
</kw>
<msg timestamp="20210623 15:03:09.960" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:03:08.867" endtime="20210623 15:03:09.960"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:03:09.960" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:03:09.960" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:03:09.960" endtime="20210623 15:03:09.960"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:09.961" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:03:09.960" endtime="20210623 15:03:09.961"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:03:09.962" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:03:09.961" endtime="20210623 15:03:09.962"/>
</kw>
<msg timestamp="20210623 15:03:09.962" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:03:09.961" endtime="20210623 15:03:09.962"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:03:09.963" endtime="20210623 15:03:09.963"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:03:39.974" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:03:09.964" endtime="20210623 15:03:39.975"/>
</kw>
<status status="PASS" starttime="20210623 15:03:08.866" endtime="20210623 15:03:39.975"/>
</iter>
<iter>
<var name="${VAR}">4</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:03:39.976" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:03:39.981" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:03:40.643" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:03:39.976" endtime="20210623 15:03:40.643"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:03:40.644" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:03:40.649" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:03:41.262" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:03:41.262" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:03:40.643" endtime="20210623 15:03:41.263"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:41.264" level="INFO">
  
&gt; SSID 6 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 7 : Marijke
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 00:18:e7:fb:d7:72
           Signal             : 23%  

</msg>
<status status="PASS" starttime="20210623 15:03:41.263" endtime="20210623 15:03:41.265"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:03:41.266" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:03:41.265" endtime="20210623 15:03:41.266"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:41.267" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:03:41.267" endtime="20210623 15:03:41.267"/>
</kw>
<msg timestamp="20210623 15:03:41.268" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:03:39.975" endtime="20210623 15:03:41.268"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:03:41.268" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:03:41.268" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:03:41.268" endtime="20210623 15:03:41.268"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:03:41.269" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:03:41.269" endtime="20210623 15:03:41.269"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:03:41.270" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:03:41.270" endtime="20210623 15:03:41.270"/>
</kw>
<msg timestamp="20210623 15:03:41.270" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:03:41.269" endtime="20210623 15:03:41.270"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:03:41.270" endtime="20210623 15:03:41.270"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:04:11.281" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:03:41.271" endtime="20210623 15:04:11.281"/>
</kw>
<status status="PASS" starttime="20210623 15:03:39.975" endtime="20210623 15:04:11.281"/>
</iter>
<iter>
<var name="${VAR}">5</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:04:11.283" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:04:11.286" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:04:11.936" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:04:11.282" endtime="20210623 15:04:11.936"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:04:11.937" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:04:11.941" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:04:12.590" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:04:12.591" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:04:11.936" endtime="20210623 15:04:12.591"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:12.592" level="INFO">
  
&gt; SSID 12 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 13 : VGV75194AB277
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 50:7e:5d:4a:b2:77
           Signal             : 35%  

</msg>
<status status="PASS" starttime="20210623 15:04:12.591" endtime="20210623 15:04:12.592"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:04:12.594" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:04:12.592" endtime="20210623 15:04:12.594"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:12.594" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:04:12.594" endtime="20210623 15:04:12.594"/>
</kw>
<msg timestamp="20210623 15:04:12.594" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:04:11.282" endtime="20210623 15:04:12.594"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:04:12.595" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:04:12.595" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:04:12.595" endtime="20210623 15:04:12.595"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:12.595" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:04:12.595" endtime="20210623 15:04:12.596"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:04:12.596" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:04:12.596" endtime="20210623 15:04:12.596"/>
</kw>
<msg timestamp="20210623 15:04:12.597" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:04:12.596" endtime="20210623 15:04:12.597"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:04:12.597" endtime="20210623 15:04:12.597"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:04:42.607" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:04:12.597" endtime="20210623 15:04:42.607"/>
</kw>
<status status="PASS" starttime="20210623 15:04:11.282" endtime="20210623 15:04:42.607"/>
</iter>
<iter>
<var name="${VAR}">6</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:04:42.609" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:04:42.613" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:04:43.277" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:04:42.608" endtime="20210623 15:04:43.278"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:04:43.279" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:04:43.284" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:04:43.932" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:04:43.933" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:04:43.278" endtime="20210623 15:04:43.933"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:43.934" level="INFO">
  
&gt; SSID 16 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 17 : 
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 72:6a:b0:0d:03:67
           Signal             : 99%  

</msg>
<status status="PASS" starttime="20210623 15:04:43.933" endtime="20210623 15:04:43.934"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:04:43.936" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:04:43.934" endtime="20210623 15:04:43.936"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:43.936" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:04:43.936" endtime="20210623 15:04:43.936"/>
</kw>
<msg timestamp="20210623 15:04:43.937" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:04:42.608" endtime="20210623 15:04:43.937"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:04:43.937" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:04:43.937" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:04:43.937" endtime="20210623 15:04:43.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:04:43.938" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:04:43.937" endtime="20210623 15:04:43.938"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:04:43.939" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:04:43.938" endtime="20210623 15:04:43.939"/>
</kw>
<msg timestamp="20210623 15:04:43.939" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:04:43.938" endtime="20210623 15:04:43.939"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:04:43.939" endtime="20210623 15:04:43.939"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:05:13.955" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:04:43.939" endtime="20210623 15:05:13.955"/>
</kw>
<status status="PASS" starttime="20210623 15:04:42.607" endtime="20210623 15:05:13.955"/>
</iter>
<iter>
<var name="${VAR}">7</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:05:13.956" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:05:13.961" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:05:14.631" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:05:13.956" endtime="20210623 15:05:14.631"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:05:14.632" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:05:14.635" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:05:15.267" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:05:15.267" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:05:14.632" endtime="20210623 15:05:15.267"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:15.269" level="INFO">
  
&gt; SSID 9 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 10 : KPN Fon
      Network type            : Infrastructure
      Authentication          : Open
      Encryption              : None 
      BSSID 1                 : 72:6a:b0:0d:03:64
           Signal             : 99%  

</msg>
<status status="PASS" starttime="20210623 15:05:15.267" endtime="20210623 15:05:15.269"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:05:15.270" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:05:15.269" endtime="20210623 15:05:15.270"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:15.271" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:05:15.270" endtime="20210623 15:05:15.271"/>
</kw>
<msg timestamp="20210623 15:05:15.271" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:05:13.956" endtime="20210623 15:05:15.271"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:05:15.271" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:05:15.272" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:05:15.271" endtime="20210623 15:05:15.272"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:15.274" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:05:15.272" endtime="20210623 15:05:15.275"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:05:15.277" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:05:15.276" endtime="20210623 15:05:15.277"/>
</kw>
<msg timestamp="20210623 15:05:15.277" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:05:15.276" endtime="20210623 15:05:15.277"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:05:15.277" endtime="20210623 15:05:15.278"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:05:45.284" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:05:15.278" endtime="20210623 15:05:45.284"/>
</kw>
<status status="PASS" starttime="20210623 15:05:13.955" endtime="20210623 15:05:45.284"/>
</iter>
<iter>
<var name="${VAR}">8</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:05:45.285" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:05:45.290" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:05:46.004" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:05:45.285" endtime="20210623 15:05:46.004"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:05:46.005" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:05:46.009" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:05:46.573" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:05:46.574" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:05:46.004" endtime="20210623 15:05:46.574"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:46.575" level="INFO">
  
&gt; SSID 7 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 8 : 
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 72:6a:b0:0d:03:67
           Signal             : 78%  

</msg>
<status status="PASS" starttime="20210623 15:05:46.574" endtime="20210623 15:05:46.575"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:05:46.577" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:05:46.575" endtime="20210623 15:05:46.577"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:46.577" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:05:46.577" endtime="20210623 15:05:46.577"/>
</kw>
<msg timestamp="20210623 15:05:46.578" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:05:45.285" endtime="20210623 15:05:46.578"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:05:46.578" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:05:46.578" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:05:46.578" endtime="20210623 15:05:46.578"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:05:46.579" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:05:46.578" endtime="20210623 15:05:46.579"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:05:46.580" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:05:46.579" endtime="20210623 15:05:46.580"/>
</kw>
<msg timestamp="20210623 15:05:46.580" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:05:46.579" endtime="20210623 15:05:46.580"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:05:46.580" endtime="20210623 15:05:46.580"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:06:16.588" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:05:46.580" endtime="20210623 15:06:16.588"/>
</kw>
<status status="PASS" starttime="20210623 15:05:45.284" endtime="20210623 15:06:16.588"/>
</iter>
<iter>
<var name="${VAR}">9</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:06:16.590" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:06:16.593" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:06:17.146" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:06:16.589" endtime="20210623 15:06:17.146"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:06:17.147" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:06:17.150" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:06:17.737" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:06:17.738" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:06:17.146" endtime="20210623 15:06:17.738"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:17.739" level="INFO">
  
&gt; SSID 7 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 8 : 
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 72:6a:b0:0d:03:67
           Signal             : 99%  

</msg>
<status status="PASS" starttime="20210623 15:06:17.738" endtime="20210623 15:06:17.739"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:06:17.740" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:06:17.739" endtime="20210623 15:06:17.740"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:17.741" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:06:17.741" endtime="20210623 15:06:17.741"/>
</kw>
<msg timestamp="20210623 15:06:17.741" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:06:16.589" endtime="20210623 15:06:17.741"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:06:17.742" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:06:17.742" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:06:17.741" endtime="20210623 15:06:17.742"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:17.742" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:06:17.742" endtime="20210623 15:06:17.742"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:06:17.743" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:06:17.743" endtime="20210623 15:06:17.743"/>
</kw>
<msg timestamp="20210623 15:06:17.743" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:06:17.742" endtime="20210623 15:06:17.743"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:06:17.743" endtime="20210623 15:06:17.744"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:06:47.751" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:06:17.744" endtime="20210623 15:06:47.751"/>
</kw>
<status status="PASS" starttime="20210623 15:06:16.588" endtime="20210623 15:06:47.751"/>
</iter>
<iter>
<var name="${VAR}">10</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:06:47.752" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:06:47.756" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:06:48.313" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:06:47.752" endtime="20210623 15:06:48.313"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:06:48.314" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:06:48.317" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:06:48.893" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:06:48.894" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:06:48.313" endtime="20210623 15:06:48.894"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:48.895" level="INFO">
  
&gt; SSID 14 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 15 : VRV95170E11BB
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : bc:30:d9:0e:11:bb
           Signal             : 41%  

</msg>
<status status="PASS" starttime="20210623 15:06:48.894" endtime="20210623 15:06:48.895"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:06:48.897" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:06:48.895" endtime="20210623 15:06:48.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:48.897" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:06:48.897" endtime="20210623 15:06:48.897"/>
</kw>
<msg timestamp="20210623 15:06:48.898" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:06:47.752" endtime="20210623 15:06:48.898"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:06:48.899" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:06:48.899" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:06:48.898" endtime="20210623 15:06:48.899"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:06:48.899" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:06:48.899" endtime="20210623 15:06:48.899"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:06:48.900" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:06:48.900" endtime="20210623 15:06:48.900"/>
</kw>
<msg timestamp="20210623 15:06:48.901" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:06:48.900" endtime="20210623 15:06:48.901"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:06:48.901" endtime="20210623 15:06:48.901"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:07:18.908" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:06:48.901" endtime="20210623 15:07:18.908"/>
</kw>
<status status="PASS" starttime="20210623 15:06:47.751" endtime="20210623 15:07:18.908"/>
</iter>
<iter>
<var name="${VAR}">11</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:07:18.910" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:07:18.914" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:07:19.620" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:07:18.910" endtime="20210623 15:07:19.621"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:07:19.621" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:07:19.625" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:07:20.351" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:07:20.352" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:07:19.621" endtime="20210623 15:07:20.352"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:20.355" level="INFO">
  
&gt; SSID 8 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 9 : VGV75194AB277
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 50:7e:5d:4a:b2:77
           Signal             : 35%  

</msg>
<status status="PASS" starttime="20210623 15:07:20.352" endtime="20210623 15:07:20.355"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:07:20.357" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:07:20.355" endtime="20210623 15:07:20.357"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:20.357" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:07:20.357" endtime="20210623 15:07:20.358"/>
</kw>
<msg timestamp="20210623 15:07:20.358" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:07:18.909" endtime="20210623 15:07:20.358"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:07:20.359" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:07:20.359" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:07:20.358" endtime="20210623 15:07:20.359"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:20.360" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:07:20.359" endtime="20210623 15:07:20.360"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:07:20.361" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:07:20.361" endtime="20210623 15:07:20.362"/>
</kw>
<msg timestamp="20210623 15:07:20.362" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:07:20.360" endtime="20210623 15:07:20.362"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:07:20.362" endtime="20210623 15:07:20.363"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:07:50.368" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:07:20.363" endtime="20210623 15:07:50.368"/>
</kw>
<status status="PASS" starttime="20210623 15:07:18.908" endtime="20210623 15:07:50.368"/>
</iter>
<iter>
<var name="${VAR}">12</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:07:50.369" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:07:50.373" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:07:50.929" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:07:50.369" endtime="20210623 15:07:50.930"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:07:50.930" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:07:50.934" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:07:51.498" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:07:51.498" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:07:50.930" endtime="20210623 15:07:51.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:51.500" level="INFO">
  
&gt; SSID 6 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  
  SSID 7 : ASUS
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : d8:50:e6:93:eb:b8
           Signal             : 38%  

</msg>
<status status="PASS" starttime="20210623 15:07:51.498" endtime="20210623 15:07:51.500"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:07:51.501" level="INFO">${Analyser_ChannelID_5Ghz} = ['2']</msg>
<status status="PASS" starttime="20210623 15:07:51.500" endtime="20210623 15:07:51.501"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:51.501" level="INFO">Analyser Channel IDs are ['2']</msg>
<status status="PASS" starttime="20210623 15:07:51.501" endtime="20210623 15:07:51.501"/>
</kw>
<msg timestamp="20210623 15:07:51.502" level="INFO">${5Ghz_ChannelID_Analyser} = ['2']</msg>
<status status="PASS" starttime="20210623 15:07:50.368" endtime="20210623 15:07:51.502"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:07:51.502" level="INFO">Length is 1</msg>
<msg timestamp="20210623 15:07:51.502" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 1</msg>
<status status="PASS" starttime="20210623 15:07:51.502" endtime="20210623 15:07:51.502"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:07:51.503" level="INFO">ChannelIDs are ['2'] and Length of ChannelIDs is 1</msg>
<status status="PASS" starttime="20210623 15:07:51.503" endtime="20210623 15:07:51.503"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<msg timestamp="20210623 15:07:51.504" level="FAIL">[ 2 ] does not contain value '120'.</msg>
<status status="FAIL" starttime="20210623 15:07:51.503" endtime="20210623 15:07:51.504"/>
</kw>
<msg timestamp="20210623 15:07:51.504" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20210623 15:07:51.503" endtime="20210623 15:07:51.504"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20210623 15:07:51.504" endtime="20210623 15:07:51.504"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:08:21.516" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20210623 15:07:51.504" endtime="20210623 15:08:21.516"/>
</kw>
<status status="PASS" starttime="20210623 15:07:50.368" endtime="20210623 15:08:21.516"/>
</iter>
<iter>
<var name="${VAR}">13</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:08:21.518" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:08:21.523" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:08:22.161" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:08:21.518" endtime="20210623 15:08:22.161"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:08:22.162" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:08:22.166" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:08:22.813" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:08:22.814" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:08:22.162" endtime="20210623 15:08:22.814"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:08:22.815" level="INFO">
  
&gt; SSID 15 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:66
           Signal             : 99%  
           Radio type         : 802.11ac
           Channel            : 120 
           Basic rates (Mbps) : 12 24 58.5
           Other rates (Mbps) : 18 36 48 54 526.5
      BSSID 2                 : 94:6a:b0:0d:03:65
           Signal             : 99%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
  

</msg>
<status status="PASS" starttime="20210623 15:08:22.814" endtime="20210623 15:08:22.815"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:08:22.816" level="INFO">${Analyser_ChannelID_5Ghz} = ['120', '2']</msg>
<status status="PASS" starttime="20210623 15:08:22.815" endtime="20210623 15:08:22.816"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:08:22.816" level="INFO">Analyser Channel IDs are ['120', '2']</msg>
<status status="PASS" starttime="20210623 15:08:22.816" endtime="20210623 15:08:22.816"/>
</kw>
<msg timestamp="20210623 15:08:22.817" level="INFO">${5Ghz_ChannelID_Analyser} = ['120', '2']</msg>
<status status="PASS" starttime="20210623 15:08:21.517" endtime="20210623 15:08:22.817"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:08:22.817" level="INFO">Length is 2</msg>
<msg timestamp="20210623 15:08:22.817" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 2</msg>
<status status="PASS" starttime="20210623 15:08:22.817" endtime="20210623 15:08:22.817"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:08:22.818" level="INFO">ChannelIDs are ['120', '2'] and Length of ChannelIDs is 2</msg>
<status status="PASS" starttime="20210623 15:08:22.817" endtime="20210623 15:08:22.818"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20210623 15:08:22.819" endtime="20210623 15:08:22.819"/>
</kw>
<msg timestamp="20210623 15:08:22.819" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20210623 15:08:22.818" endtime="20210623 15:08:22.819"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20210623 15:08:22.819" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20210623 15:08:22.819" endtime="20210623 15:08:22.819"/>
</kw>
<status status="PASS" starttime="20210623 15:08:21.517" endtime="20210623 15:08:22.820"/>
</iter>
<status status="PASS" starttime="20210623 15:01:34.962" endtime="20210623 15:08:22.820"/>
</for>
<status status="PASS" starttime="20210623 14:58:09.295" endtime="20210623 15:08:22.820"/>
</kw>
<status status="PASS" starttime="20210623 14:57:45.685" endtime="20210623 15:08:22.820"/>
</test>
<test id="s1-t2" name="Verify setting 5GHz ChannelID 36 with Bandwith 20 MHz">
<kw name="Login to DUT" library="CommonFunction" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${HOME_PAGE}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20210623 15:08:22.826" level="INFO">Opening browser 'firefox' to base url 'https://mijnmodem.kpn/login.htm'.</msg>
<msg timestamp="20210623 15:08:22.829" level="INFO">Firefox driver log is always forced to to: D:\Personal\Automation\KPN\WiFi\result\geckodriver-10.log</msg>
<status status="PASS" starttime="20210623 15:08:22.825" endtime="20210623 15:08:35.719"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20210623 15:08:35.719" endtime="20210623 15:08:35.738"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:08:37.747" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 15:08:35.738" endtime="20210623 15:08:37.747"/>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>${Password}</arg>
<arg>${Password_value}</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<msg timestamp="20210623 15:08:37.748" level="INFO">Sending key(s) ('Qwerty1!',) to //input[@name='ui_pws'] element.</msg>
<msg timestamp="20210623 15:08:38.079" level="INFO">Sending keys Qwerty1!</msg>
<status status="PASS" starttime="20210623 15:08:37.747" endtime="20210623 15:08:38.122"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:08:40.131" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 15:08:38.122" endtime="20210623 15:08:40.131"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Login_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:40.132" level="INFO">Clicking element '//tbody/tr[5]/td[1]'.</msg>
<status status="PASS" starttime="20210623 15:08:40.131" endtime="20210623 15:08:41.967"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:08:46.972" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210623 15:08:41.968" endtime="20210623 15:08:46.972"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>${Topology Overview}</arg>
<arg>15s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210623 15:08:46.972" endtime="20210623 15:08:46.986"/>
</kw>
<status status="PASS" starttime="20210623 15:08:22.825" endtime="20210623 15:08:46.986"/>
</kw>
<kw name="Verify 5Ghz ChannelID scenarios">
<arg>36</arg>
<arg>2</arg>
<arg>1</arg>
<tag>5GhzChannelIDSet</tag>
<tag>Funtional</tag>
<tag>WiFi</tag>
<doc>This Test case is to verify setting different channel and Bandwith</doc>
<kw name="Go to WLAN Page" library="WLANPage">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_Tab}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:46.989" level="INFO">Clicking element '//a[normalize-space()='WLAN']'.</msg>
<status status="PASS" starttime="20210623 15:08:46.989" endtime="20210623 15:08:47.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:08:52.046" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20210623 15:08:47.041" endtime="20210623 15:08:52.046"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>Access Points</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="PASS" starttime="20210623 15:08:52.046" endtime="20210623 15:08:52.052"/>
</kw>
<kw name="Select Frame" library="SeleniumLibrary">
<arg>id:frm_main2</arg>
<doc>Sets frame identified by ``locator`` as the current frame.</doc>
<msg timestamp="20210623 15:08:52.053" level="INFO">Selecting frame 'id:frm_main2'.</msg>
<status status="PASS" starttime="20210623 15:08:52.052" endtime="20210623 15:08:52.065"/>
</kw>
<kw name="Current Frame Should Contain" library="SeleniumLibrary">
<arg>${wlan_page}</arg>
<doc>Verifies that the current frame contains ``text``.</doc>
<msg timestamp="20210623 15:08:52.073" level="INFO">Current frame contains text 'Restore WiFi Defaults'.</msg>
<status status="PASS" starttime="20210623 15:08:52.065" endtime="20210623 15:08:52.073"/>
</kw>
<status status="PASS" starttime="20210623 15:08:46.988" endtime="20210623 15:08:52.073"/>
</kw>
<kw name="Set 5Ghz Channel ID with value" library="WLANPage">
<arg>${ChannelID5_index}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_ChannelID_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:52.074" level="INFO">Clicking element '//tbody/tr[@id='tr_wchan_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210623 15:08:52.074" endtime="20210623 15:08:52.306"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:52.308" level="INFO">Clicking element '//*[@id="tr_wchan_both"]/td[2]/div[2]/ul/li[2]/a'.</msg>
<status status="PASS" starttime="20210623 15:08:52.307" endtime="20210623 15:08:52.532"/>
</kw>
<status status="PASS" starttime="20210623 15:08:52.073" endtime="20210623 15:08:52.532"/>
</kw>
<kw name="Set 5Ghz Bandwith with value" library="WLANPage">
<arg>${5GHz_Bandwidth}</arg>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${5Ghz_Bandwidth_dropdown}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:52.533" level="INFO">Clicking element '//tbody/tr[@id='tr_bandwidth_both']/td[@class='tdText']/div[2]'.</msg>
<status status="PASS" starttime="20210623 15:08:52.533" endtime="20210623 15:08:52.760"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[${item label}]/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:52.761" level="INFO">Clicking element '//*[@id="tr_bandwidth_both"]/td[2]/div[2]/ul/li[1]/a'.</msg>
<status status="PASS" starttime="20210623 15:08:52.760" endtime="20210623 15:08:52.987"/>
</kw>
<status status="PASS" starttime="20210623 15:08:52.532" endtime="20210623 15:08:52.988"/>
</kw>
<kw name="Save the WiFi setting" library="WLANPage">
<kw name="Click Element" library="SeleniumLibrary">
<arg>${WLAN_save_setting}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:08:52.989" level="INFO">Clicking element '//*[@id="save"]/span[2]'.</msg>
<status status="PASS" starttime="20210623 15:08:52.989" endtime="20210623 15:08:53.246"/>
</kw>
<kw name="Capture Page Screenshot" library="SeleniumLibrary">
<arg>${TEST_NAME}.png</arg>
<doc>Takes a screenshot of the current page and embeds it into a log file.</doc>
<msg timestamp="20210623 15:08:53.355" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Verify%20setting%205GHz%20ChannelID%2036%20with%20Bandwith%2020%20MHz.png"&gt;&lt;img src="Verify%20setting%205GHz%20ChannelID%2036%20with%20Bandwith%2020%20MHz.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20210623 15:08:53.246" endtime="20210623 15:08:53.355"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:09:08.363" level="INFO">Slept 15 seconds</msg>
<status status="PASS" starttime="20210623 15:08:53.355" endtime="20210623 15:09:08.363"/>
</kw>
<status status="PASS" starttime="20210623 15:08:52.988" endtime="20210623 15:09:08.364"/>
</kw>
<kw name="Logout from DUT" library="CommonFunction">
<kw name="Unselect Frame" library="SeleniumLibrary">
<doc>Sets the main frame as the current frame.</doc>
<status status="PASS" starttime="20210623 15:09:08.364" endtime="20210623 15:09:08.368"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Logout_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20210623 15:09:08.369" level="INFO">Clicking element 'btn_logout'.</msg>
<status status="PASS" starttime="20210623 15:09:08.368" endtime="20210623 15:09:08.767"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:09:10.783" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210623 15:09:08.767" endtime="20210623 15:09:10.783"/>
</kw>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20210623 15:09:10.783" endtime="20210623 15:09:12.061"/>
</kw>
<status status="PASS" starttime="20210623 15:09:08.364" endtime="20210623 15:09:12.061"/>
</kw>
<kw name="Telnet to DUT Console" library="Telnet">
<kw name="Open Connection" library="Telnet">
<arg>192.168.2.254</arg>
<arg>prompt_is_regexp=yes</arg>
<arg>prompt=#</arg>
<doc>Opens a new Telnet connection to the given host and port.</doc>
<msg timestamp="20210623 15:09:12.062" level="INFO">Opening connection to 192.168.2.254:23 with prompt: # (regexp)</msg>
<status status="PASS" starttime="20210623 15:09:12.062" endtime="20210623 15:09:12.063"/>
</kw>
<kw name="Login" library="Telnet">
<arg>ls</arg>
<arg>date</arg>
<arg>login_prompt=#</arg>
<arg>password_prompt=#</arg>
<doc>Logs in to the Telnet server with the given user information.</doc>
<msg timestamp="20210623 15:09:12.211" level="INFO">BusyBox v1.26.2 (2020-06-23 18:38:50 CST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

# ls
[1;34mbin[0m      [1;34mdev[0m      [1;36mmnt[0m      [1;34mproc[0m     [1;34msys[0m      [1;36mvar[0m
[1;34mbootfs[0m   [1;36metc[0m      [1;36mopt[0m      [1;34mramdisk[0m  [1;34mtmp[0m      [1;34mwww[0m
[1;34mdata[0m     [1;34mlib[0m      [1;34mowl[0m      [1;34msbin[0m     [1;34musr[0m
# date
Thu Jan  1 06:03:33 UTC 1970
#</msg>
<status status="PASS" starttime="20210623 15:09:12.064" endtime="20210623 15:09:12.211"/>
</kw>
<status status="PASS" starttime="20210623 15:09:12.062" endtime="20210623 15:09:12.211"/>
</kw>
<kw name="Get the 5Ghz channel id from console" library="Telnet">
<var>${5Ghz_ChannelID_Console}</var>
<kw name="Execute Command" library="Telnet">
<var>${out_5Ghz}</var>
<arg>cat /etc/config/.glbcfg |grep 5G_Channel=</arg>
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<msg timestamp="20210623 15:09:12.214" level="INFO">cat /etc/config/.glbcfg |grep 5G_Channel=</msg>
<msg timestamp="20210623 15:09:12.318" level="INFO">ARC_WLAN_5G_Channel=36
#</msg>
<msg timestamp="20210623 15:09:12.318" level="INFO">${out_5Ghz} = ARC_WLAN_5G_Channel=36
#</msg>
<status status="PASS" starttime="20210623 15:09:12.212" endtime="20210623 15:09:12.318"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${out_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:09:12.319" level="INFO">ARC_WLAN_5G_Channel=36
#</msg>
<status status="PASS" starttime="20210623 15:09:12.319" endtime="20210623 15:09:12.319"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${result_5Ghz}</var>
<arg>${out_5Ghz}</arg>
<arg>=(\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:09:12.320" level="INFO">${result_5Ghz} = ['36']</msg>
<status status="PASS" starttime="20210623 15:09:12.320" endtime="20210623 15:09:12.320"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>5Ghz Channel ID from console is ${result_5Ghz[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:09:12.321" level="INFO">5Ghz Channel ID from console is 36</msg>
<status status="PASS" starttime="20210623 15:09:12.320" endtime="20210623 15:09:12.321"/>
</kw>
<msg timestamp="20210623 15:09:12.323" level="INFO">${5Ghz_ChannelID_Console} = 36</msg>
<status status="PASS" starttime="20210623 15:09:12.211" endtime="20210623 15:09:12.323"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Channel ID from Console is ${5Ghz_ChannelID_Console}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:09:12.323" level="INFO">Channel ID from Console is 36</msg>
<status status="PASS" starttime="20210623 15:09:12.323" endtime="20210623 15:09:12.323"/>
</kw>
<kw name="Close All Connections" library="Telnet">
<doc>Closes all open connections and empties the connection cache.</doc>
<status status="PASS" starttime="20210623 15:09:12.324" endtime="20210623 15:09:12.324"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${5Ghz_ChannelID_Console}</arg>
<arg>${5GHz_Channel}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20210623 15:09:12.324" endtime="20210623 15:09:12.324"/>
</kw>
<if>
<branch type="IF" condition="${5GHz_Channel} &lt; 100">
<kw name="Sleep" library="BuiltIn">
<arg>60s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210623 15:10:12.327" level="INFO">Slept 1 minute</msg>
<status status="PASS" starttime="20210623 15:09:12.325" endtime="20210623 15:10:12.327"/>
</kw>
<status status="PASS" starttime="20210623 15:09:12.324" endtime="20210623 15:10:12.327"/>
</branch>
<branch type="ELSE">
<kw name="Sleep" library="BuiltIn">
<arg>180s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20210623 15:10:12.328" endtime="20210623 15:10:12.328"/>
</kw>
<status status="NOT RUN" starttime="20210623 15:10:12.327" endtime="20210623 15:10:12.328"/>
</branch>
<status status="PASS" starttime="20210623 15:09:12.324" endtime="20210623 15:10:12.328"/>
</if>
<for flavor="IN RANGE">
<var>${VAR}</var>
<value>14</value>
<iter>
<var name="${VAR}">0</var>
<kw name="Fetch the Channel IDs from Windows Analyser" library="CommonWindowsFunction">
<var>${5Ghz_ChannelID_Analyser}</var>
<kw name="Run Process" library="Process">
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:10:12.330" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:10:12.335" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:10:16.745" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20210623 15:10:12.330" endtime="20210623 15:10:16.747"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</arg>
<arg>${cmd}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20210623 15:10:16.748" level="INFO">Starting process:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe "netsh wlan show network mode=bssid | Select-String -Pattern \"jacques\" -Context 1,16"</msg>
<msg timestamp="20210623 15:10:16.757" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210623 15:10:18.120" level="INFO">Process completed.</msg>
<msg timestamp="20210623 15:10:18.120" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210623 15:10:16.747" endtime="20210623 15:10:18.121"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stdout}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:10:18.123" level="INFO">
  
&gt; SSID 1 : jacques
      Network type            : Infrastructure
      Authentication          : WPA2-Personal
      Encryption              : CCMP 
      BSSID 1                 : 94:6a:b0:0d:03:65
           Signal             : 75%  
           Radio type         : 802.11n
           Channel            : 2 
           Basic rates (Mbps) : 6.5 16 19.5 117
           Other rates (Mbps) : 18 19.5 24 36 39 48 54 156
      BSSID 2                 : 94:6a:b0:0d:03:66
           Signal             : 99%  
           Radio type         : 802.11ac
           Channel            : 36 
           Basic rates (Mbps) : 12 24 58.5
           Other rates (Mbps) : 18 36 48 54 526.5
  

</msg>
<status status="PASS" starttime="20210623 15:10:18.121" endtime="20210623 15:10:18.123"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${Analyser_ChannelID_5Ghz}</var>
<arg>${result.stdout}</arg>
<arg>Channel.*: (\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20210623 15:10:18.125" level="INFO">${Analyser_ChannelID_5Ghz} = ['2', '36']</msg>
<status status="PASS" starttime="20210623 15:10:18.123" endtime="20210623 15:10:18.126"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Analyser Channel IDs are ${Analyser_ChannelID_5Ghz}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:10:18.127" level="INFO">Analyser Channel IDs are ['2', '36']</msg>
<status status="PASS" starttime="20210623 15:10:18.126" endtime="20210623 15:10:18.127"/>
</kw>
<msg timestamp="20210623 15:10:18.128" level="INFO">${5Ghz_ChannelID_Analyser} = ['2', '36']</msg>
<status status="PASS" starttime="20210623 15:10:12.329" endtime="20210623 15:10:18.128"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${5Ghz_ChannelID_Analyser_Length}</var>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20210623 15:10:18.129" level="INFO">Length is 2</msg>
<msg timestamp="20210623 15:10:18.129" level="INFO">${5Ghz_ChannelID_Analyser_Length} = 2</msg>
<status status="PASS" starttime="20210623 15:10:18.128" endtime="20210623 15:10:18.129"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>ChannelIDs are ${5Ghz_ChannelID_Analyser} and Length of ChannelIDs is ${5Ghz_ChannelID_Analyser_Length}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210623 15:10:18.131" level="INFO">ChannelIDs are ['2', '36'] and Length of ChannelIDs is 2</msg>
<status status="PASS" starttime="20210623 15:10:18.130" endtime="20210623 15:10:18.131"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>list Should contain value</arg>
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="List Should Contain Value" library="Collections">
<arg>${5Ghz_ChannelID_Analyser}</arg>
<arg>${5Ghz_ChannelID_Console}</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20210623 15:10:18.132" endtime="20210623 15:10:18.132"/>
</kw>
<msg timestamp="20210623 15:10:18.133" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20210623 15:10:18.131" endtime="20210623 15:10:18.133"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20210623 15:10:18.134" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20210623 15:10:18.134" endtime="20210623 15:10:18.134"/>
</kw>
<status status="PASS" starttime="20210623 15:10:12.328" endtime="20210623 15:10:18.134"/>
</iter>
<status status="PASS" starttime="20210623 15:10:12.328" endtime="20210623 15:10:18.134"/>
</for>
<status status="PASS" starttime="20210623 15:08:46.987" endtime="20210623 15:10:18.135"/>
</kw>
<status status="PASS" starttime="20210623 15:08:22.823" endtime="20210623 15:10:18.137"/>
</test>
<test id="s1-t3" name="Verify setting 5GHz ChannelID 40 with Bandwith 20 MHz">
<kw name="Login to DUT" library="CommonFunction" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${HOME_PAGE}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20210623 15:10:18.151" level="INFO">Opening browser 'firefox' to base url 'https://mijnmodem.kpn/login.htm'.</msg>
<msg timestamp="20210623 15:10:18.155" level="INFO">Firefox driver log is always forced to to: D:\Personal\Automation\KPN\WiFi\result\geckodriver-11.log</msg>
<status status="PASS" starttime="20210623 15:10:18.150" endtime="20210623 15:10:29.165"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20210623 15:10:29.166" endtime="20210623 15:10:29.170"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="FAIL" starttime="20210623 15:10:29.171" endtime="20210623 15:10:29.488"/>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>${Password}</arg>
<arg>${Password_value}</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<status status="NOT RUN" starttime="20210623 15:10:29.489" endtime="20210623 15:10:29.489"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20210623 15:10:29.489" endtime="20210623 15:10:29.489"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Login_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20210623 15:10:29.490" endtime="20210623 15:10:29.490"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20210623 15:10:29.490" endtime="20210623 15:10:29.490"/>
</kw>
<kw name="Wait Until Page Contains" library="SeleniumLibrary">
<arg>${Topology Overview}</arg>
<arg>15s</arg>
<doc>Waits until ``text`` appears on the current page.</doc>
<status status="NOT RUN" starttime="20210623 15:10:29.490" endtime="20210623 15:10:29.490"/>
</kw>
<status status="FAIL" starttime="20210623 15:10:18.149" endtime="20210623 15:10:29.491"/>
</kw>
<status status="FAIL" starttime="20210623 15:10:18.142" endtime="20210623 15:10:29.492">Setup failed:
Execution terminated by signal</status>
</test>
<test id="s1-t4" name="Verify setting 5GHz ChannelID 44 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.494" endtime="20210623 15:10:29.495">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t5" name="Verify setting 5GHz ChannelID 48 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.506" endtime="20210623 15:10:29.507">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t6" name="Verify setting 5GHz ChannelID 52 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.509" endtime="20210623 15:10:29.510">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t7" name="Verify setting 5GHz ChannelID 56 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.512" endtime="20210623 15:10:29.514">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t8" name="Verify setting 5GHz ChannelID 60 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.516" endtime="20210623 15:10:29.517">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t9" name="Verify setting 5GHz ChannelID 64 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.519" endtime="20210623 15:10:29.544">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t10" name="Verify setting 5GHz ChannelID 100 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.547" endtime="20210623 15:10:29.548">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t11" name="Verify setting 5GHz ChannelID 104 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.571" endtime="20210623 15:10:29.573">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t12" name="Verify setting 5GHz ChannelID 108 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.576" endtime="20210623 15:10:29.577">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t13" name="Verify setting 5GHz ChannelID 112 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.594" endtime="20210623 15:10:29.603">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t14" name="Verify setting 5GHz ChannelID 116 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.607" endtime="20210623 15:10:29.608">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t15" name="Verify setting 5GHz ChannelID 36 with Bandwith 20/40 MHz ">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.626" endtime="20210623 15:10:29.644">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t16" name="Verify setting 5GHz ChannelID 40 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.662" endtime="20210623 15:10:29.663">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t17" name="Verify setting 5GHz ChannelID 44 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.675" endtime="20210623 15:10:29.678">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t18" name="Verify setting 5GHz ChannelID 48 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.693" endtime="20210623 15:10:29.694">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t19" name="Verify setting 5GHz ChannelID 52 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.704" endtime="20210623 15:10:29.705">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t20" name="Verify setting 5GHz ChannelID 56 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.709" endtime="20210623 15:10:29.720">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t21" name="Verify setting 5GHz ChannelID 60 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.727" endtime="20210623 15:10:29.728">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t22" name="Verify setting 5GHz ChannelID 64 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.744" endtime="20210623 15:10:29.755">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t23" name="Verify setting 5GHz ChannelID 100 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.772" endtime="20210623 15:10:29.774">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t24" name="Verify setting 5GHz ChannelID 104 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.787" endtime="20210623 15:10:29.789">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t25" name="Verify setting 5GHz ChannelID 108 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.793" endtime="20210623 15:10:29.796">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t26" name="Verify setting 5GHz ChannelID 112 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.808" endtime="20210623 15:10:29.810">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t27" name="Verify setting 5GHz ChannelID 116 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.813" endtime="20210623 15:10:29.815">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t28" name="Verify setting 5GHz ChannelID 36 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.821" endtime="20210623 15:10:29.823">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t29" name="Verify setting 5GHz ChannelID 40 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.835" endtime="20210623 15:10:29.838">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t30" name="Verify setting 5GHz ChannelID 44 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.844" endtime="20210623 15:10:29.845">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t31" name="Verify setting 5GHz ChannelID 48 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.856" endtime="20210623 15:10:29.858">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t32" name="Verify setting 5GHz ChannelID 52 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.862" endtime="20210623 15:10:29.863">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t33" name="Verify setting 5GHz ChannelID 56 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.871" endtime="20210623 15:10:29.872">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t34" name="Verify setting 5GHz ChannelID 60 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.875" endtime="20210623 15:10:29.876">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t35" name="Verify setting 5GHz ChannelID 64 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.879" endtime="20210623 15:10:29.880">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t36" name="Verify setting 5GHz ChannelID 100 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.890" endtime="20210623 15:10:29.892">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t37" name="Verify setting 5GHz ChannelID 104 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.895" endtime="20210623 15:10:29.901">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t38" name="Verify setting 5GHz ChannelID 108 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.911" endtime="20210623 15:10:29.915">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t39" name="Verify setting 5GHz ChannelID 112 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.933" endtime="20210623 15:10:29.935">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t40" name="Verify setting 5GHz ChannelID 116 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.938" endtime="20210623 15:10:29.939">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t41" name="Verify setting 5GHz ChannelID 120 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.955" endtime="20210623 15:10:29.961">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t42" name="Verify setting 5GHz ChannelID 124 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.968" endtime="20210623 15:10:29.970">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t43" name="Verify setting 5GHz ChannelID 128 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:29.996" endtime="20210623 15:10:29.997">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t44" name="Verify setting 5GHz ChannelID 132 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.001" endtime="20210623 15:10:30.003">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t45" name="Verify setting 5GHz ChannelID 136 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.009" endtime="20210623 15:10:30.011">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t46" name="Verify setting 5GHz ChannelID 140 with Bandwith 20 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.018" endtime="20210623 15:10:30.019">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t47" name="Verify setting 5GHz ChannelID 120 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.021" endtime="20210623 15:10:30.023">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t48" name="Verify setting 5GHz ChannelID 124 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.027" endtime="20210623 15:10:30.028">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t49" name="Verify setting 5GHz ChannelID 128 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.041" endtime="20210623 15:10:30.043">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t50" name="Verify setting 5GHz ChannelID 132 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.053" endtime="20210623 15:10:30.054">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t51" name="Verify setting 5GHz ChannelID 136 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.071" endtime="20210623 15:10:30.082">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t52" name="Verify setting 5GHz ChannelID 140 with Bandwith 20/40 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.090" endtime="20210623 15:10:30.094">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t53" name="Verify setting 5GHz ChannelID 120 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.102" endtime="20210623 15:10:30.104">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t54" name="Verify setting 5GHz ChannelID 124 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.122" endtime="20210623 15:10:30.141">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t55" name="Verify setting 5GHz ChannelID 128 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.144" endtime="20210623 15:10:30.145">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t56" name="Verify setting 5GHz ChannelID 132 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.151" endtime="20210623 15:10:30.159">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t57" name="Verify setting 5GHz ChannelID 136 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.172" endtime="20210623 15:10:30.175">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-t58" name="Verify setting 5GHz ChannelID 140 with Bandwith 20/40/80 MHz">
<tag>robot:exit</tag>
<status status="FAIL" starttime="20210623 15:10:30.187" endtime="20210623 15:10:30.189">Test execution stopped due to a fatal error.</status>
</test>
<status status="FAIL" starttime="20210623 14:57:45.242" endtime="20210623 15:10:30.200"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="56" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="1" skip="0" info="combined" combined="NOT robot:exit">NOT robot:exit</stat>
<stat pass="0" fail="55" skip="0">robot:exit</stat>
</tag>
<suite>
<stat pass="2" fail="56" skip="0" id="s1" name="WLAN 5GHzChannelID">WLAN 5GHzChannelID</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210623 15:10:30.097" level="WARN">Multiple test cases with name 'Verify setting 5GHz ChannelID 120 with Bandwith 20/40/80 MHz' executed in test suite 'WLAN 5GHzChannelID'.</msg>
</errors>
</robot>
